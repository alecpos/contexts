'use client';
import { GOOGLE_TAG_ID, GoogleTagMappings } from './constants';

type ProductHref = keyof typeof GoogleTagMappings;

const getGoogleTagCode = (
    product_href: ProductHref,
    subscriptionType: string,
) => {
    if (product_href in GoogleTagMappings) {
        return GoogleTagMappings[product_href](subscriptionType);
    } else {
        return null;
    }
};

export const trackGooglePurchaseEvent = async (payload: any, values: any) => {
    // const destination = getGoogleTagCode(
    //     payload.product_href,
    //     payload.subscriptionType,
    // );

    // if (!destination) {
    //     console.error('Could not identify google tag destination for user');
    //     console.log(payload);
    //     return;
    // }

    window.rudderanalytics.track('Item Purchased', {
        currency: 'USD',
        total: 1,
        value: payload.value,
        revenue_value: payload.value,
        revenue: payload.value,
        shipping: 0,
        tax: 0,
        order_id: payload.id,
    });

    window.dataLayer = window.dataLayer || [];

    window.dataLayer.push({
        event: 'custom-purchased',
    });

    window.dataLayer.push({
        event: 'purchase',
        transaction_id: payload.id, //Transaction id - either database transaction id, or if there payment system attached then the id generated by the system
        value: payload.value, //value of transaction - dont use a dollar sign and keep it numeric no quotes
        event_id: payload.event_id,
        tax: 0, //tax if any else 0 -  dont use a dollar sign and keep it numeric no quotes
        shipping: 0, //shipping assuming 0 -  dont use a dollar sign and keep it numeric no quotes
        currency: 'USD', //correct currency code
        // coupon: 'SUMMER_SALE', //any coupon if there are no coupons for purchase process remove this line
        items: [
            {
                item_id: getGoogleTagCode(
                    payload.product,
                    payload.subscriptionType,
                ), //if there is item id defined in database. note that item_id or item_name one of them is compulsory field
                item_name: payload.product, // or whatever is appropriate
                item_variant: payload.variant,
                // affiliation: 'AACSP', // optional. line can be removed as well
                // coupon: 'SUMMER_FUN', //if there is a coupon code else line can be removed. optional
                // item_category: 'Membership', //Type of Membership. optional
                price: payload.value, // same as value -  dont use a dollar sign and keep it numeric no quotes
                quantity: 1, //assuming quantity will always be one. but if it can more than use the right number
            },
        ],
        // fbp: payload.fbp,
        // fbc: payload.fbc,
        email: payload.email,
    });

    // const final_destination = `${GOOGLE_TAG_ID}/${destination}`;
    // window.dataLayer?.push({ ecommerce: null });
    // window.dataLayer?.push({
    //     event: 'order_received',
    //     ecommerce: {
    //         transaction_id: payload.id,
    //         value: payload.value,
    //         currency: 'USD',
    //         items: [
    //             {
    //                 item_id: getGoogleTagCode(
    //                     payload.product,
    //                     payload.subscriptionType,
    //                 ),
    //                 item_name: payload.product,
    //             },
    //         ],
    //     },
    // });
    // window.dataLayer?.push({
    //     event: 'order_received',
    //     value: payload.value,
    //     transaction_id: payload.id,
    //     product: payload.product,
    //     variant: payload.variant,
    //     subscriptionType: payload.subscriptionType,
    // });

    // Specific product conversion
    // window.gtag('event', 'conversion', {
    //     send_to: final_destination,
    //     value: payload.value,
    //     currency: 'USD',
    //     transaction_id: payload.id,
    //     first_name: values?.firstName || '',
    //     last_name: values?.lastName || '',
    //     email: values?.email || '',
    //     gclid: payload.gclid,
    // });

    // // Global Purchase Conversion
    // window.gtag('event', 'conversion', {
    //     send_to: `${GOOGLE_TAG_ID}/6PCECJGQr5cZEMnT3dQq`,
    //     value: payload.value,
    //     currency: 'USD',
    //     transaction_id: payload.id,
    //     first_name: values?.firstName || '',
    //     last_name: values?.lastName || '',
    //     email: values?.email || '',
    //     gclid: payload.glcid,
    // });
};

export const trackGoogleLeadEvent = async (values: any) => {
    // window.gtag('event', 'conversion', {
    //     send_to: 'AW-11451984329/lZdSCIaxiJUZEMnT3dQq',
    //     ...(values?.firstName && { first_name: values?.firstName }),
    //     ...(values?.lastName && { last_name: values?.lastName }),
    //     email: values?.email || '',
    //     ...(values?.gclid && { gclid: values.gclid }),
    // });

    window.dataLayer?.push({
        event: 'dl-signup-lead', //where is google ads getting "Lead" events from? this is not 'Lead'...
        eventId: values.eventId,
        fbp: values.fbp,
        fbc: values.fbc,
    });

    window.rudderanalytics.track('Lead');
};

export const trackGTMMetaLeadEvent = (event_id: string, values: any) => {
    window.dataLayer?.push({
        event: 'meta_pixel_lead',
        transaction_id: event_id,
        fbp: values.fbp,
        fbc: values.fbc,
    });
};
